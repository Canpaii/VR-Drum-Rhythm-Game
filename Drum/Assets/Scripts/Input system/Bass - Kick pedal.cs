//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Input system/Bass - Kick pedal.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BassKickpedal: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BassKickpedal()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Bass - Kick pedal"",
    ""maps"": [
        {
            ""name"": ""Pedal Inputs"",
            ""id"": ""fde84f0d-ea92-4b4b-b3fd-c47162a6a48d"",
            ""actions"": [
                {
                    ""name"": ""Pedal press"",
                    ""type"": ""Button"",
                    ""id"": ""bd6d1abd-2e0f-47e9-a606-0d2d1a3b0139"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b4b2055b-8537-40df-a929-933038370a60"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pedal press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Pedal Inputs
        m_PedalInputs = asset.FindActionMap("Pedal Inputs", throwIfNotFound: true);
        m_PedalInputs_Pedalpress = m_PedalInputs.FindAction("Pedal press", throwIfNotFound: true);
    }

    ~@BassKickpedal()
    {
        UnityEngine.Debug.Assert(!m_PedalInputs.enabled, "This will cause a leak and performance issues, BassKickpedal.PedalInputs.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Pedal Inputs
    private readonly InputActionMap m_PedalInputs;
    private List<IPedalInputsActions> m_PedalInputsActionsCallbackInterfaces = new List<IPedalInputsActions>();
    private readonly InputAction m_PedalInputs_Pedalpress;
    public struct PedalInputsActions
    {
        private @BassKickpedal m_Wrapper;
        public PedalInputsActions(@BassKickpedal wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pedalpress => m_Wrapper.m_PedalInputs_Pedalpress;
        public InputActionMap Get() { return m_Wrapper.m_PedalInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PedalInputsActions set) { return set.Get(); }
        public void AddCallbacks(IPedalInputsActions instance)
        {
            if (instance == null || m_Wrapper.m_PedalInputsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PedalInputsActionsCallbackInterfaces.Add(instance);
            @Pedalpress.started += instance.OnPedalpress;
            @Pedalpress.performed += instance.OnPedalpress;
            @Pedalpress.canceled += instance.OnPedalpress;
        }

        private void UnregisterCallbacks(IPedalInputsActions instance)
        {
            @Pedalpress.started -= instance.OnPedalpress;
            @Pedalpress.performed -= instance.OnPedalpress;
            @Pedalpress.canceled -= instance.OnPedalpress;
        }

        public void RemoveCallbacks(IPedalInputsActions instance)
        {
            if (m_Wrapper.m_PedalInputsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPedalInputsActions instance)
        {
            foreach (var item in m_Wrapper.m_PedalInputsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PedalInputsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PedalInputsActions @PedalInputs => new PedalInputsActions(this);
    public interface IPedalInputsActions
    {
        void OnPedalpress(InputAction.CallbackContext context);
    }
}
